{"version":3,"sources":["ng://@n-fuse/ng-plotly/plotly/plotly.component.ts","ng://@n-fuse/ng-plotly/index.ts"],"names":["ResizeEvent","PlotlyParameter","PlotlyComponent","cd","_this","this","tag","debug","console","log","resizeHandler","resizing","clearTimeout","setTimeout","resize","onResizeTimeOut","bind","prototype","ngOnInit","Tag","plotId","ngAfterViewInit","recreate","ngOnChanges","changes","plot","changedKeys","Object","keys","includesArr","changeAction","ChangeAction","Resize","Relayout","includes","Redraw","Recreate","applyChanges","relayout","redraw","None","restyle","update","traces","undefined","Plotly.restyle","event","Plotly.Plots","_a","sent","layout","Plotly.relayout","dataUpdate","layoutUpdate","Plotly.update","data","Plotly.redraw","removeEventListeners","document","getElementById","width","style","height","Plotly.newPlot","config","configuration","frames","afterPlot","attachEventListeners","events","forEach","k","on","Plotly","window","addEventListener","removeEventListener","addTraces","index","Plotly.addTraces","deleteTraces","Plotly.deleteTraces","animate","animation","Plotly.animate","addFrames","indices","Plotly.addFrames","deleteFrames","Plotly.deleteFrames","ngOnDestroy","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","host","[style.width]","[style.height]","ChangeDetectorRef","Input","arr","val","indexOf","vals","some","PlotlyModule","NgModule","imports","CommonModule","exports","declarations","providers","Hover","Unhover","Click","DoubleClick","ClickAnnotation","AfterPlot","Restyle","Selecting","Selected","Deselect"],"mappings":"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","sourcesContent":["import {\n  Component, ChangeDetectionStrategy, OnInit, AfterViewInit, OnDestroy,\n  ChangeDetectorRef, Input, SimpleChanges,\n} from '@angular/core';\nimport * as Plotly from 'plotly.js';\n\nexport const PlotlyEvent = {\n  Hover: 'plotly_hover',\n  Unhover: 'plotly_unhover',\n  Click: 'plotly_click',\n  DoubleClick: 'plotly_doubleclick',\n  ClickAnnotation: 'plotly_clickannotation',\n  AfterPlot: 'plotly_afterplot',\n  Redraw: 'plotly_redraw',\n  Restyle: 'plotly_restyle',\n  Relayout: 'plotly_relayout',\n  Selecting: 'plotly_selecting',\n  Selected: 'plotly_selected',\n  Deselect: 'plotly_deselect',\n};\n\nconst ResizeEvent: string = 'resize';\n\nconst PlotlyParameter = {\n  PlotId: 'plotId',\n  PlotClass: 'plotClass',\n\n  Data: 'data',\n  Layout: 'layout',\n  Configuration: 'configuration',\n  Events: 'events',\n  Frames: 'frames',\n\n  Width: 'width',\n  Height: 'height',\n};\n\nenum ChangeAction {\n  None,\n  Restyle,\n  Relayout,\n  Resize,\n  Update,\n  Redraw,\n  Recreate,\n}\n\n@Component({\n  selector: 'plotly',\n  template: `<div\n  id=\"{{ plotId }}\"\n  class=\"{{ plotClass }}\">\n</div>\n`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[style.width]': '\"100%\"',\n    '[style.height]': '\"100%\"',\n  }\n})\nexport class PlotlyComponent implements OnInit, AfterViewInit, OnDestroy {\n  private static readonly Tag: string = 'PlotlyComponent';\n\n  private tag: string;\n\n  private resizing: NodeJS.Timer;\n  private resizeHandler: EventListenerObject;\n\n  private changeAction: ChangeAction;\n\n  public plot/*: HTMLElement */;\n  public afterPlot: boolean = false;\n\n  @Input() private debug: boolean = false;\n  @Input() private onResizeTimeOut: number = 200;\n\n  @Input() public plotId: string = '';\n  @Input() public plotClass: string = '';\n\n  @Input() public data: any[];\n  @Input() public layout: any;\n  @Input() public configuration: any;\n  @Input() public events: any;\n  @Input() public frames: any[];\n\n  @Input() public width: number;\n  @Input() public height: number;\n\n  constructor(\n    private readonly cd: ChangeDetectorRef,\n  ) {\n    const tag: string = `${this.tag}.constructor()`;\n    if (this.debug) console.log(tag);\n\n    // WebKit double resize event workaround.\n    // https://stackoverflow.com/questions/5534363/why-does-the-jquery-resize-event-fire-twice\n    this.resizeHandler = (() => {\n      const tag: string = `${this.tag}.resizeHandler()`;\n      if (this.resizing) {\n        if (this.debug) console.log(tag, `clearTimeout(${this.resizing})`);\n        clearTimeout(this.resizing);\n      }\n      this.resizing = setTimeout(() => this.resize(), this.onResizeTimeOut);\n    }).bind(this);\n  }\n\n  public ngOnInit(): void {\n    this.tag = `${PlotlyComponent.Tag}.${this.plotId}`;\n    const tag: string = `${this.tag}.ngOnInit()`;\n    if (this.debug) console.log(tag);\n  }\n\n  public ngAfterViewInit(): void {\n    const tag: string = `${this.tag}.ngAfterViewInit()`;\n    if (this.debug) console.log(tag);\n    setTimeout(() => this.recreate());\n  }\n\n  private ngOnChanges(changes: SimpleChanges): void {\n    const tag: string = `${this.tag}.ngOnChanges()`;\n    if (!this.plot) {\n      if (this.debug) console.log(tag, 'ignoring changes, plot not yet once initialized');\n      return;\n    }\n    if (this.debug) console.log(tag, 'changes:', changes);\n\n    const changedKeys: string[] = Object.keys(changes);\n\n    if (includesArr(changedKeys, [\n      PlotlyParameter.Width, PlotlyParameter.Height])) {\n      this.changeAction = ChangeAction.Resize;\n    }\n\n    if (includesArr(changedKeys, [\n      PlotlyParameter.Layout, PlotlyParameter.PlotId,\n      PlotlyParameter.PlotClass])) {\n      this.changeAction = ChangeAction.Relayout;\n    }\n\n    if (includes(changedKeys, PlotlyParameter.Data)) {\n      this.changeAction = ChangeAction.Redraw;\n    }\n\n    if (includesArr(changedKeys, [\n      PlotlyParameter.Configuration, PlotlyParameter.Events,\n      PlotlyParameter.Frames])) {\n      this.changeAction = ChangeAction.Recreate;\n    }\n\n    setTimeout(() => this.applyChanges());\n  }\n\n  private applyChanges(): void {\n    const tag: string = `${this.tag}.applyChanges()`;\n    if (this.debug) console.log(tag, 'this.changeAction:', ChangeAction[this.changeAction]);\n    switch (this.changeAction) {\n      case ChangeAction.Resize:\n        this.resize();\n        break;\n      case ChangeAction.Relayout:\n        this.relayout();\n        break;\n      case ChangeAction.Redraw:\n        this.redraw();\n        break;\n      case ChangeAction.Recreate:\n        this.recreate();\n        break;\n    }\n    this.changeAction = ChangeAction.None;\n  }\n\n  public async restyle(update: any, traces?: number[]): Promise<any> {\n    const tag: string = `${this.tag}.restyle()`;\n    if (this.debug) console.log(tag, 'update:', update);\n    if (this.debug) console.log(tag, 'traces:', traces === undefined ? 'all' : traces);\n    return Plotly.restyle(this.plot, update, traces);\n  }\n\n  public async resize(event?: Event): Promise<any> {\n    const tag: string = `${this.tag}.resize()`;\n    if (this.debug) console.log(tag, 'event:', event);\n    await Plotly.Plots.resize(this.plot);\n  }\n\n  public async relayout(layout: any = this.layout): Promise<any> {\n    const tag: string = `${this.tag}.relayout()`;\n    if (this.debug) console.log(tag, 'layout:', layout);\n    await Plotly.relayout(this.plot, layout);\n  }\n\n  public async update(dataUpdate: any, layoutUpdate: any): Promise<any> {\n    const tag: string = `${this.tag}.update()`;\n    if (this.debug) console.log(tag, 'dataUpdate:', dataUpdate);\n    if (this.debug) console.log(tag, 'layoutUpdate:', layoutUpdate);\n    return Plotly.update(this.plot, dataUpdate, layoutUpdate);\n  }\n\n  public async redraw(): Promise<any> {\n    const tag: string = `${this.tag}.redraw()`;\n    if (this.debug) console.log(tag);\n    this.plot.data = this.data;\n    this.plot.layout = this.layout;\n    return Plotly.redraw(this.plot);\n  }\n\n  public async recreate(): Promise<any> {\n    const tag: string = `${this.tag}.recreate()`;\n    if (this.debug) console.log(tag);\n    this.removeEventListeners();\n\n    this.plot = document.getElementById(this.plotId);\n\n    if (this.width) {\n      this.plot.style.width = this.width + '%';\n      this.plot.style['margin-left'] = (100 - this.width) / 2 + '%';\n    }\n\n    if (this.height) {\n      this.plot.style.height = this.height + '%';\n      this.plot.style['margin-top'] = (100 - this.height) / 2 + '%';\n    }\n    if (this.debug) console.log(tag, 'this.plot:', this.plot);\n\n    // if (this.debug) console.log(tag, 'this.data:', this.data);\n    // if (this.debug) console.log(tag, 'this.layout:', this.layout);\n    // if (this.debug) console.log(tag, 'this.configuration:', this.configuration);\n    // if (this.debug) console.log(tag, 'this.frames:', this.frames);\n    await Plotly.newPlot(this.plot, {\n      data: this.data,\n      layout: this.layout,\n      config: this.configuration,\n      frames: this.frames,\n    });\n\n    if (this.width || this.height) {\n      if (this.debug) console.log(tag, 'resizing');\n      await this.resize();\n      this.afterPlot = true;\n    }\n\n    this.attachEventListeners(this.plot, this.events);\n\n    return;\n  }\n\n  private attachEventListeners(plot: any, events: any): void {\n    const tag: string = `${this.tag}.attachEventListeners()`;\n    if (this.debug) console.log(tag, 'events:', events);\n\n    Object.keys(events || {}).forEach(k => {\n      const tag: string = `${this.tag}.${k}()`;\n      this.plot.on(k, (data, event) => {\n        if (this.debug) console.log(tag, 'data:', data);\n        if (this.debug) console.log(tag, 'event:', event);\n        events[k](data, event, this, Plotly);\n      });\n    });\n\n    window.addEventListener(ResizeEvent, this.resizeHandler);\n  }\n\n  public removeEventListeners(): void {\n    const tag: string = `${this.tag}.removeEventListeners()`;\n    if (this.debug) console.log(tag);\n    window.removeEventListener(ResizeEvent, this.resizeHandler);\n  }\n\n  public async addTraces(traces: any | any[], index?: number): Promise<any> {\n    const tag: string = `${this.tag}.addTraces()`;\n    if (this.debug) console.log(tag, 'traces:', traces);\n    if (this.debug) console.log(tag, 'index:', index);\n    return Plotly.addTraces(this.plot, traces, index);\n  }\n\n  public async deleteTraces(traces: number | number[]): Promise<any> {\n    const tag: string = `${this.tag}.deleteTraces()`;\n    if (this.debug) console.log(tag, 'traces:', traces);\n    Plotly.deleteTraces(this.plot, traces);\n  }\n\n  public async animate(update: any, animation: any): Promise<any> {\n    const tag: string = `${this.tag}.animate()`;\n    if (this.debug) console.log(tag, 'update:', update);\n    if (this.debug) console.log(tag, 'animation:', animation);\n    return Plotly.animate(this.plot, update, animation);\n  }\n\n  public async addFrames(frames: any[], indices?: number[]): Promise<any> {\n    const tag: string = `${this.tag}.addFrames()`;\n    if (this.debug) console.log(tag, 'frames:', frames);\n    if (this.debug) console.log(tag, 'indices:', indices);\n    return Plotly.addFrames(this.plot, frames, indices);\n  }\n\n  public async deleteFrames(indices: number[]): Promise<any> {\n    const tag: string = `${this.tag}.deleteFrames()`;\n    if (this.debug) console.log(tag, 'frames:', frames);\n    return Plotly.deleteFrames(this.plot, indices);\n  }\n\n  public ngOnDestroy(): void {\n    const tag: string = `${this.tag}.ngOnDestroy()`;\n    if (this.debug) console.log(tag);\n    this.removeEventListeners();\n  }\n}\n\n\nfunction includes(arr: any[], val: any): boolean {\n  return arr.indexOf(val) !== -1;\n}\n\nfunction includesArr(arr: any[], vals: any[]): boolean {\n  return vals.some(val => includes(arr, val));\n}\n\nfunction clone(v: any): any {\n  return !v ? v : JSON.parse(JSON.stringify((v)));\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PlotlyComponent, PlotlyEvent } from './plotly/plotly.component';\n\nexport { PlotlyComponent, PlotlyEvent };\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [PlotlyComponent],\n  declarations: [PlotlyComponent],\n  providers: [],\n})\nexport class PlotlyModule { }\n"]}